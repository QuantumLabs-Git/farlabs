"""Far Labs Inference Worker

This worker process pulls queued inference tasks from Redis, simulates execution,
and streams results back to the inference service via pub/sub.
"""

from __future__ import annotations

import asyncio
import json
import os
import random
from typing import Any, Dict

import redis.asyncio as redis  # type: ignore[import-untyped]

REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379")
QUEUE_KEY = "inference_queue"
TASK_CHANNEL_TEMPLATE = "task:{task_id}"


async def simulate_inference(task: Dict[str, Any]) -> Dict[str, Any]:
    """Generate a synthetic response to mimic model output."""
    prompt = task.get("prompt", "")
    model_id = task.get("model", "unknown-model")
    summary = prompt[:240] + ("..." if len(prompt) > 240 else "")
    generated_text = (
        f"[{model_id}] Response for prompt:\n\n"
        f"{summary}\n\n"
        "This is a simulated output generated by the Far Labs worker."
    )

    tokens_generated = min(int(task.get("max_tokens", 800) * random.uniform(0.4, 0.9)), 2048)
    tokens_per_second = max(int(tokens_generated / random.uniform(1.5, 3.5)), 12)

    return {
        "status": "completed",
        "text": generated_text,
        "tokens_generated": tokens_generated,
        "tokens_per_second": tokens_per_second,
        "accuracy": round(random.uniform(0.92, 0.99), 3),
    }


async def publish_progress(client: redis.Redis, task_id: str, payload: Dict[str, Any]) -> None:
    channel = TASK_CHANNEL_TEMPLATE.format(task_id=task_id)
    await client.publish(channel, json.dumps(payload))


async def handle_task(client: redis.Redis, task: Dict[str, Any]) -> None:
    task_id = task.get("task_id")
    if not task_id:
        return

    await publish_progress(
        client,
        task_id,
        {"status": "running", "message": "Task accepted by GPU worker", "node_id": task.get("node_id")},
    )

    await asyncio.sleep(random.uniform(0.5, 1.5))
    await publish_progress(
        client,
        task_id,
        {"status": "running", "message": "Generating tokens", "progress": 0.5},
    )

    await asyncio.sleep(random.uniform(0.5, 1.5))
    result = await simulate_inference(task)
    await publish_progress(client, task_id, result)


async def worker() -> None:
    client = redis.from_url(REDIS_URL, decode_responses=True)
    try:
        while True:
            try:
                _, raw = await client.brpop(QUEUE_KEY)
            except (redis.ConnectionError, redis.TimeoutError):
                await asyncio.sleep(1)
                continue

            try:
                task = json.loads(raw)
            except json.JSONDecodeError:
                continue

            await handle_task(client, task)
    finally:
        await client.close()


def main() -> None:
    asyncio.run(worker())


if __name__ == "__main__":
    main()
